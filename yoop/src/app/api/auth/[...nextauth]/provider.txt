CredentialsProvider({// Credentials is a method
         // This name appears on the sign in form button (e.g. "Sign in with credentials")
      name: "credentials",
      id: "credentials",
      credentials: {
        // The lowercase credentials is a property/field definition object that tells
        //  Auth.js what input fields to show on the login form and how to handle them.
        email: { label: "Email", type:"email" },
        password: { label: "Password", type: "password" },
      },
            // This function is called when user submits the sign-in form
      // It receives the credentials from the form submission
      // authorize: async function(credentials:any, request:any):Promise<any> {
        async authorize(credentials:any, request:any):Promise<any>{ 
        // It's a callback function that handles the actual authentication logic for credential-based login.
        await dbConnect()
        try {
            const user = await UserModel.findOne({
                $or:[
                    {email:credentials.email},
                    // {username:credentials.username}
                ]
            })
            if(!user){
                throw new Error("no username/email found")
            }
            //now we will check if user is registered but not verified
            if(!user.isVerified){
                throw new Error("not verified, please verify your account")
            }
            //now if user is found , we will validate password
            const password = user.password// will return encrypted password
            const result = await bcrypt.compare(credentials.password, password)
            if(!result){
                // throw new Error("wrong password, pls try again")throw new Error("Invalid credentials")  // ‚ùå this triggers redirect to `/api/auth/error`
                 return null; // ‚úÖ this tells NextAuth to return error in result, not redirect
            }
            console.log("üîç Authorize function called with:", {
          username: credentials?.email,
          password: credentials?.password,
          requestMethod: request.method, // This will be POST
          requestUrl: request.url
        })
         // Return user object (this will be stored in the JWT/session)
          // Don't include sensitive data like password
            return user // üëà this object goes into jwt() as `user`
}  catch (error:any) {
        console.log("failed to connect to database", error.message)
        throw new Error(error.message || error.toString() || "Unknown error")
    }
    // const response = await fetch(request)
    // if (!response.ok) return null
    // return (await response.json()) ?? null
  }}
),